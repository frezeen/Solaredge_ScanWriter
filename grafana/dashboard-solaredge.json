{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "influxdb",
          "uid": "0MA5Qsvnz"
        },
        "enable": false,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 0,
  "links": [],
  "panels": [
    {
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 22,
        "x": 0,
        "y": 0
      },
      "id": 171,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<div style=\"text-align:center; color:#ffffff; font-size:2.2rem; font-weight:600;\">\r\n  Live Monitoring SolarEdge SE6000H\r\n</div>",
        "mode": "html"
      },
      "pluginVersion": "12.2.0",
      "title": "",
      "transparent": true,
      "type": "text"
    },
    {
      "datasource": {
        "type": "influxdb"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 2,
        "x": 22,
        "y": 0
      },
      "id": 26,
      "options": {
        "bgColor": "transparent",
        "clockType": "24 hour",
        "countdownSettings": {
          "endCountdownTime": "2021-10-12T05:34:44+02:00",
          "endText": "00:00:00",
          "invalidValueText": "invalid value",
          "noValueText": "no value found",
          "queryCalculation": "last",
          "source": "input"
        },
        "countupSettings": {
          "beginCountupTime": "2022-06-01T23:43:26+02:00",
          "beginText": "00:00:00",
          "invalidValueText": "invalid value",
          "noValueText": "no value found",
          "queryCalculation": "last",
          "source": "input"
        },
        "dateSettings": {
          "dateFormat": "DD-MM-YYYY",
          "fontSize": "30",
          "fontWeight": "bold",
          "locale": "it",
          "showDate": true
        },
        "descriptionSettings": {
          "descriptionText": "",
          "fontSize": "12px",
          "fontWeight": "normal",
          "noValueText": "no description found",
          "source": "none"
        },
        "fontMono": false,
        "mode": "time",
        "refresh": "sec",
        "timeSettings": {
          "fontSize": "12px",
          "fontWeight": "normal"
        },
        "timezone": "",
        "timezoneSettings": {
          "fontSize": "12px",
          "fontWeight": "normal",
          "showTimezone": false,
          "zoneFormat": "offsetAbbv"
        }
      },
      "pluginVersion": "2.1.9",
      "targets": [
        {
          "refId": "A"
        }
      ],
      "title": "",
      "transparent": true,
      "type": "grafana-clock-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "displayName": "Produzione",
          "links": [],
          "mappings": [],
          "max": 6000,
          "min": 0,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "yellow",
                "value": 0
              },
              {
                "color": "orange",
                "value": 50
              },
              {
                "color": "dark-red",
                "value": 75
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 9,
        "w": 7,
        "x": 0,
        "y": 2
      },
      "hideTimeOverride": true,
      "id": 10,
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "sizing": "auto",
        "text": {}
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "cf0k9s806a29sd"
          },
          "query": "import \"timezone\"\r\nimport \"date\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: -1m)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"Inverter\" and\r\n    r.endpoint == \"Power\" and\r\n    r.unit == \"W\"\r\n  )\r\n  |> group(columns: [])\r\n  |> last()\r\n  |> map(fn: (r) => ({ r with _time: date.truncate(t: r._time, unit: 1s) }))\r\n  |> rename(columns: {_value: \"Produzione\"})\r\n  |> keep(columns: [\"_time\",\"Produzione\"])\r\n  |> yield(name: \"produzione_last_W\")",
          "refId": "Produzione"
        }
      ],
      "timeFrom": "0d/d",
      "title": "",
      "transparent": true,
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "fieldConfig": {
        "defaults": {
          "displayName": "Prelievo - Immissione",
          "links": [],
          "mappings": [],
          "max": 5000,
          "min": -5000,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-red",
                "value": 0
              },
              {
                "color": "dark-green",
                "value": 0
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 9,
        "w": 8,
        "x": 7,
        "y": 2
      },
      "hideTimeOverride": true,
      "id": 14,
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "sizing": "auto",
        "text": {}
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "cf0k9s806a29sd"
          },
          "hide": false,
          "query": "import \"timezone\"\r\nimport \"date\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: -1m)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"Meter\" and\r\n    r.endpoint == \"Power\" and\r\n    r.unit == \"W\"\r\n  )\r\n  |> group(columns: [])         // una sola serie\r\n  |> last()\r\n  |> map(fn: (r) => ({ r with _time: date.truncate(t: r._time, unit: 1s) }))\r\n  |> rename(columns: {_value: \"Prelievo Immissione\"})\r\n  |> keep(columns: [\"_time\", \"Prelievo Immissione\"])\r\n  |> yield(name: \"meter_power_last_W\")",
          "refId": "Prelievo - Immissione"
        }
      ],
      "timeFrom": "0d/d",
      "title": "",
      "transparent": true,
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "fieldConfig": {
        "defaults": {
          "displayName": "Consumo",
          "mappings": [],
          "max": 4300,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              },
              {
                "color": "orange",
                "value": 1000
              },
              {
                "color": "red",
                "value": 2000
              },
              {
                "color": "dark-red",
                "value": 3000
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 9,
        "w": 7,
        "x": 15,
        "y": 2
      },
      "hideTimeOverride": true,
      "id": 12,
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "/^Consumo$/",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "sizing": "auto",
        "text": {}
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "cf0k9s806a29sd"
          },
          "hide": false,
          "query": "import \"timezone\"\r\nimport \"date\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: -1m)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"Inverter\" and\r\n    r.endpoint == \"Power\" and\r\n    r.unit == \"W\"\r\n  )\r\n  |> group(columns: [])\r\n  |> last()\r\n  |> map(fn: (r) => ({ r with _time: date.truncate(t: r._time, unit: 1s) }))\r\n  |> rename(columns: {_value: \"Produzione\"})\r\n  |> keep(columns: [\"_time\",\"Produzione\"])\r\n  |> yield(name: \"produzione_last_W\")",
          "refId": "Produzione"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "cf0k9s806a29sd"
          },
          "hide": false,
          "query": "import \"timezone\"\r\nimport \"date\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: -1m)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"Meter\" and\r\n    r.endpoint == \"Power\" and\r\n    r.unit == \"W\"\r\n  )\r\n  |> group(columns: [])         // una sola serie\r\n  |> last()\r\n  |> map(fn: (r) => ({ r with _time: date.truncate(t: r._time, unit: 1s) }))\r\n  |> rename(columns: {_value: \"Prelievo Immissione\"})\r\n  |> keep(columns: [\"_time\", \"Prelievo Immissione\"])\r\n  |> yield(name: \"meter_power_last_W\")",
          "refId": "Prelievo Immissione"
        }
      ],
      "timeFrom": "0d/d",
      "title": "",
      "transformations": [
        {
          "id": "calculateField",
          "options": {
            "alias": "Consumo",
            "binary": {
              "left": {
                "matcher": {
                  "id": "byName",
                  "options": "Produzione"
                }
              },
              "operator": "-",
              "right": {
                "matcher": {
                  "id": "byName",
                  "options": "Prelievo Immissione"
                }
              }
            },
            "cumulative": {
              "field": "Produzione",
              "reducer": "sum"
            },
            "mode": "binary",
            "reduce": {
              "include": [
                "Produzione",
                "Prelievo Immissione"
              ],
              "reducer": "step"
            },
            "replaceFields": true,
            "window": {
              "field": "Produzione",
              "reducer": "mean",
              "windowAlignment": "trailing",
              "windowSize": 0.1,
              "windowSizeMode": "percentage"
            }
          }
        },
        {
          "id": "filterFieldsByName",
          "options": {
            "include": {
              "names": [
                "Consumo"
              ]
            }
          }
        }
      ],
      "transparent": true,
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "fieldConfig": {
        "defaults": {
          "decimals": 0,
          "displayName": "Temperatura",
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "green",
                "value": 0
              },
              {
                "color": "dark-red",
                "value": 50
              }
            ]
          },
          "unit": "celsius"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 2,
        "x": 22,
        "y": 2
      },
      "hideTimeOverride": true,
      "id": 48,
      "maxDataPoints": 100,
      "options": {
        "minVizHeight": 90,
        "minVizWidth": 75,
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "sizing": "manual",
        "text": {}
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "alias": "Temperatura",
          "datasource": {
            "type": "influxdb",
            "uid": "cf0k9s806a29sd"
          },
          "groupBy": [],
          "measurement": "inverter",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: -1m)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"Inverter\" and\r\n    r.endpoint == \"Temperature\" and\r\n    r.unit == \"°C\"\r\n    // opzionale: r.device_id == \"TUO_MODELLO\"\r\n  )\r\n  |> group(columns: [])      // una sola serie\r\n  |> last()\r\n  |> keep(columns: [\"_time\", \"_value\"])\r\n  |> yield(name: \"inverter_temperature_last_C\")",
          "rawQuery": true,
          "refId": "Temperatura",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "temperature"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        }
      ],
      "timeFrom": "0d/d",
      "title": "",
      "transparent": true,
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "fieldConfig": {
        "defaults": {
          "decimals": 0,
          "displayName": "Voltaggio",
          "mappings": [],
          "max": 480,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-red",
                "value": 0
              },
              {
                "color": "green",
                "value": 150
              },
              {
                "color": "dark-red",
                "value": 440
              }
            ]
          },
          "unit": "volt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 2,
        "x": 22,
        "y": 7
      },
      "hideTimeOverride": true,
      "id": 184,
      "maxDataPoints": 100,
      "options": {
        "minVizHeight": 90,
        "minVizWidth": 75,
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "sizing": "manual",
        "text": {}
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "alias": "Volt",
          "datasource": {
            "type": "influxdb",
            "uid": "cf0k9s806a29sd"
          },
          "groupBy": [],
          "measurement": "inverter",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: -1m)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"Inverter\" and\r\n    r.endpoint == \"DC Voltage\" and\r\n    r.unit == \"V\"\r\n  )\r\n  |> group(columns: [])\r\n  |> last()\r\n  |> keep(columns: [\"_time\", \"_value\"])\r\n  |> yield(name: \"voltage_dc_last_V\")",
          "rawQuery": true,
          "refId": "Voltaggio",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "voltage_dc"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        }
      ],
      "timeFrom": "0d/d",
      "title": "",
      "transparent": true,
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "light-yellow",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 0,
        "y": 11
      },
      "hideTimeOverride": true,
      "id": 44,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "/^produzione_oggi_wh$/",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "alias": "Produzione di oggi",
          "datasource": {
            "type": "influxdb",
            "uid": "cf0k9s806a29sd"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"timezone\"\nimport \"date\"\noption location = timezone.location(name: \"Europe/Rome\")\n\nstart = date.truncate(t: now(), unit: 1d)\nstop  = date.add(d: 1d, to: start)\n\ndailyDeltaWh = (tables=<-) => {\n  f = tables\n    |> first()\n    |> keep(columns: [\"device_id\", \"_value\"])\n    |> set(key: \"kind\", value: \"start\")\n\n  l = tables\n    |> last()\n    |> keep(columns: [\"device_id\", \"_value\"])\n    |> set(key: \"kind\", value: \"end\")\n\n  return union(tables: [f, l])\n    |> pivot(rowKey: [\"device_id\"], columnKey: [\"kind\"], valueColumn: \"_value\")\n    |> map(fn: (r) => ({ r with _value: float(v: r.end) - float(v: r.start) }))\n    |> map(fn: (r) => ({ r with _value: if r._value < 0.0 then 0.0 else r._value }))\n    |> group(columns: [])\n    |> sum(column: \"_value\")\n}\n\nfrom(bucket: \"Solaredge_Realtime\")\n  |> range(start: start, stop: stop)\n  |> filter(fn: (r) =>\n    r._measurement == \"realtime\" and\n    r._field == \"Inverter\" and\n    r.endpoint == \"Total Energy\" and\n    r.unit == \"Wh\"\n  )\n  |> group(columns: [\"device_id\"])\n  |> dailyDeltaWh()\n  |> map(fn: (r) => ({\n    r with\n    _time: date.truncate(\n      t: if date.millisecond(t: now()) >= 500 then date.add(d: 1s, to: now()) else now(),\n      unit: 1s\n    )\n  }))\n  |> rename(columns: {_value: \"produzione_oggi_wh\"})\n  |> keep(columns: [\"_time\",\"produzione_oggi_wh\"])\n  |> yield(name: \"produzione_fotovoltaica_oggi_wh\")",
          "queryType": "randomWalk",
          "rawQuery": true,
          "refId": "Produzione",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "0d/d",
      "title": "Produzione",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "light-yellow",
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "super-light-blue",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 3,
        "y": 11
      },
      "hideTimeOverride": true,
      "id": 67,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [],
          "fields": "",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "cf0k9s806a29sd"
          },
          "query": "import \"timezone\"\r\nimport \"date\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nstart = date.truncate(t: now(), unit: 1d)\r\n\r\nfirst = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: start)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"Meter\" and\r\n    r.endpoint == \"Export Energy\" and\r\n    r.unit == \"Wh\"\r\n  )\r\n  |> group(columns: [])\r\n  |> first()\r\n  |> keep(columns: [\"_value\"])\r\n  |> rename(columns: {_value: \"start_wh\"})\r\n  |> set(key: \"k\", value: \"x\")\r\n\r\nlast = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: start)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"Meter\" and\r\n    r.endpoint == \"Export Energy\" and\r\n    r.unit == \"Wh\"\r\n  )\r\n  |> group(columns: [])\r\n  |> last()\r\n  |> keep(columns: [\"_value\"])\r\n  |> rename(columns: {_value: \"end_wh\"})\r\n  |> set(key: \"k\", value: \"x\")\r\n\r\njoin(tables: {first: first, last: last}, on: [\"k\"])\r\n  |> map(fn: (r) => ({ r with _value: float(v: r.end_wh) - float(v: r.start_wh) }))\r\n  |> map(fn: (r) => ({ r with _time: date.truncate(t: now(), unit: 1s) }))\r\n  |> rename(columns: {_value: \"immissione_oggi_Wh\"})\r\n  |> keep(columns: [\"_time\", \"immissione_oggi_Wh\"])\r\n  |> yield(name: \"immissione_oggi_Wh\")",
          "refId": "Immissione"
        }
      ],
      "timeFrom": "0d/d",
      "title": "Immissione",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "light-yellow",
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-orange",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 6,
        "y": 11
      },
      "hideTimeOverride": true,
      "id": 66,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [],
          "fields": "/^consumo_wh$/",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "cf0k9s806a29sd"
          },
          "query": "import \"timezone\"\r\nimport \"date\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nstart = date.truncate(t: now(), unit: 1d)\r\nstop  = date.add(d: 1d, to: start)\r\n\r\n// Delta giornaliero (last - first) per device, clamp ≥0 e somma\r\ndailyDeltaWh = (tables=<-) => {\r\n  f = tables\r\n    |> first()\r\n    |> keep(columns: [\"device_id\", \"_value\"])\r\n    |> set(key: \"kind\", value: \"start\")\r\n\r\n  l = tables\r\n    |> last()\r\n    |> keep(columns: [\"device_id\", \"_value\"])\r\n    |> set(key: \"kind\", value: \"end\")\r\n\r\n  return union(tables: [f, l])\r\n    |> pivot(rowKey: [\"device_id\"], columnKey: [\"kind\"], valueColumn: \"_value\")\r\n    |> map(fn: (r) => ({ r with _value: float(v: r.end) - float(v: r.start) }))\r\n    |> map(fn: (r) => ({ r with _value: if r._value < 0.0 then 0.0 else r._value }))\r\n    |> group(columns: [])\r\n    |> sum(column: \"_value\")\r\n}\r\n\r\n// Produzione (Inverter → Total Energy, Wh)\r\nprod_val = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: start, stop: stop)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"Inverter\" and\r\n    r.endpoint == \"Total Energy\" and\r\n    r.unit == \"Wh\"\r\n  )\r\n  |> group(columns: [\"device_id\"])\r\n  |> fill(usePrevious: true)\r\n  |> dailyDeltaWh()\r\n\r\n// Import (Meter → Import Energy, Wh)\r\nimp_val = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: start, stop: stop)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"Meter\" and\r\n    r.endpoint == \"Import Energy\" and\r\n    r.unit == \"Wh\"\r\n  )\r\n  |> group(columns: [\"device_id\"])\r\n  |> fill(usePrevious: true)\r\n  |> dailyDeltaWh()\r\n\r\n// Export (Meter → Export Energy, Wh) → negativo\r\nexp_val = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: start, stop: stop)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"Meter\" and\r\n    r.endpoint == \"Export Energy\" and\r\n    r.unit == \"Wh\"\r\n  )\r\n  |> group(columns: [\"device_id\"])\r\n  |> fill(usePrevious: true)\r\n  |> dailyDeltaWh()\r\n  |> map(fn: (r) => ({ r with _value: -r._value }))\r\n\r\n// Consumo = Import − Export + Produzione (Wh)\r\nunion(tables: [imp_val, prod_val, exp_val])\r\n  |> group(columns: [])\r\n  |> sum(column: \"_value\")\r\n  |> rename(columns: {_value: \"consumo_wh\"})\r\n  |> yield(name: \"consumo_totale_oggi_Wh\")",
          "refId": "Consumo"
        }
      ],
      "timeFrom": "0d/d",
      "title": "Consumo",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "light-yellow",
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-red",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 9,
        "y": 11
      },
      "hideTimeOverride": true,
      "id": 68,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "/^_value prelievo_oggi_kwh$/",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "cf0k9s806a29sd"
          },
          "query": "import \"timezone\"\r\nimport \"date\"\r\n\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\ntoday_start = date.truncate(t: now(), unit: 1d)\r\n\r\n// Ottieni tutti i dati di oggi\r\nall_data = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: today_start)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Meter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Import Energy\")\r\n  |> filter(fn: (r) => exists r._value)\r\n  |> sort(columns: [\"_time\"])\r\n\r\n// Calcola min e max (che corrispondono a primo e ultimo per contatori crescenti)\r\nall_data\r\n  |> reduce(\r\n    identity: {first: 0.0, last: 0.0, count: 0},\r\n    fn: (r, accumulator) => ({\r\n      first: if accumulator.count == 0 then r._value else accumulator.first,\r\n      last: r._value,\r\n      count: accumulator.count + 1\r\n    })\r\n  )\r\n  |> map(fn: (r) => ({\r\n    _time: now(),\r\n    _value: (r.last - r.first),\r\n    _field: \"prelievo_oggi_kwh\",\r\n    prima_lettura: r.first,\r\n    ultima_lettura: r.last\r\n  }))\r\n",
          "refId": "Prelievo"
        }
      ],
      "timeFrom": "0d/d",
      "title": "Prelievo",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "light-yellow",
            "mode": "thresholds"
          },
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-red",
                "value": 0
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 12,
        "y": 11
      },
      "hideTimeOverride": true,
      "id": 86,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "/^Perc_Prelievo_OGGI$/",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "value",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "cf0k9s806a29sd"
          },
          "query": "import \"timezone\"\r\nimport \"date\"\r\n\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\ntoday_start = date.truncate(t: now(), unit: 1d)\r\n\r\n// Energia importata\r\nimportata = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: today_start)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Meter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Import Energy\")\r\n  |> filter(fn: (r) => exists r._value)\r\n  |> sort(columns: [\"_time\"])\r\n  |> reduce(\r\n    identity: {first: 0.0, last: 0.0, count: 0},\r\n    fn: (r, accumulator) => ({\r\n      first: if accumulator.count == 0 then r._value else accumulator.first,\r\n      last: r._value,\r\n      count: accumulator.count + 1\r\n    })\r\n  )\r\n  |> map(fn: (r) => ({ \r\n    _time: now(),\r\n    _value: (r.last - r.first),\r\n    _field: \"importata\" \r\n  }))\r\n\r\n// Energia prodotta\r\nprodotta = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: today_start)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Inverter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Total Energy\")\r\n  |> filter(fn: (r) => exists r._value)\r\n  |> sort(columns: [\"_time\"])\r\n  |> reduce(\r\n    identity: {first: 0.0, last: 0.0, count: 0},\r\n    fn: (r, accumulator) => ({\r\n      first: if accumulator.count == 0 then r._value else accumulator.first,\r\n      last: r._value,\r\n      count: accumulator.count + 1\r\n    })\r\n  )\r\n  |> map(fn: (r) => ({ \r\n    _time: now(),\r\n    _value: (r.last - r.first),\r\n    _field: \"prodotta\" \r\n  }))\r\n\r\n// Energia esportata\r\nesportata = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: today_start)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Meter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Export Energy\")\r\n  |> filter(fn: (r) => exists r._value)\r\n  |> sort(columns: [\"_time\"])\r\n  |> reduce(\r\n    identity: {first: 0.0, last: 0.0, count: 0},\r\n    fn: (r, accumulator) => ({\r\n      first: if accumulator.count == 0 then r._value else accumulator.first,\r\n      last: r._value,\r\n      count: accumulator.count + 1\r\n    })\r\n  )\r\n  |> map(fn: (r) => ({ \r\n    _time: now(),\r\n    _value: (r.last - r.first),\r\n    _field: \"esportata\" \r\n  }))\r\n\r\n// Union + Pivot per combinare tutti i dati\r\nunion(tables: [importata, prodotta, esportata])\r\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({\r\n    _time: now(),\r\n    autoconsumo_wh: r.prodotta - r.esportata,\r\n    consumo_totale_wh: r.importata + (r.prodotta - r.esportata),\r\n    \"Perc_Prelievo_OGGI\": if (r.importata + (r.prodotta - r.esportata)) > 0.0 then (r.importata / (r.importata + (r.prodotta - r.esportata))) * 100.0 else 0.0,\r\n    \"Prelievo_Wh_Debug\": r.importata,\r\n    \"Autoconsumo_Wh_Debug\": r.prodotta - r.esportata,\r\n    \"Consumo_Totale_Wh_Debug\": r.importata + (r.prodotta - r.esportata),\r\n    _field: \"percentuale_prelievo\"\r\n  }))\r\n",
          "refId": "% Prelievo"
        }
      ],
      "timeFrom": "0d/d",
      "title": "Percentuale Prelievo",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "dark-red",
            "mode": "fixed"
          },
          "decimals": 2,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "#37872D",
                "value": 0
              }
            ]
          },
          "unit": "currencyEUR"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 15,
        "y": 11
      },
      "hideTimeOverride": true,
      "id": 101,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "horizontal",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "/^costo_prelievo_oggi$/",
          "limit": 2,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "eeutt541fflz4c"
          },
          "query": "import \"timezone\"\r\nimport \"date\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nstart = date.truncate(t: now(), unit: 1d)\r\n\r\nbase = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: start)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"Meter\" and\r\n    r.endpoint == \"Import Energy\" and\r\n    r.unit == \"Wh\"\r\n  )\r\n  |> group(columns: [])  // singola serie\r\n\r\n// Primo campione non-zero, ordinato per tempo\r\nf = base\r\n  |> filter(fn: (r) => exists r._value and r._value > 0.0)\r\n  |> sort(columns: [\"_time\"], desc: false)\r\n  |> limit(n: 1)\r\n  |> keep(columns: [\"_value\",\"_time\"])\r\n  |> rename(columns: {_value: \"primo_oggi_wh\", _time: \"t_primo\"})\r\n  |> set(key: \"k\", value: \"x\")\r\n\r\n// Ultimo campione di oggi\r\nl = base\r\n  |> last()\r\n  |> keep(columns: [\"_value\",\"_time\"])\r\n  |> rename(columns: {_value: \"ultimo_oggi_wh\", _time: \"t_ultimo\"})\r\n  |> set(key: \"k\", value: \"x\")\r\n\r\n// Delta ultimo − primo (Wh)\r\ndelta = join(tables: {f: f, l: l}, on: [\"k\"])\r\n  |> map(fn: (r) => ({ r with _value: float(v: r.ultimo_oggi_wh) - float(v: r.primo_oggi_wh) }))\r\n  |> map(fn: (r) => ({ r with _value: if r._value < 0.0 then 0.0 else r._value }))\r\n  |> map(fn: (r) => ({ r with _time: date.truncate(t: r.t_ultimo, unit: 1s) }))\r\n  |> rename(columns: {_value: \"prelievo_oggi_wh\"})\r\n  |> keep(columns: [\"_time\",\"prelievo_oggi_wh\"])\r\n\r\n// Costo del prelievo (EUR) = (Wh / 1000) * prezzo_kWh\r\ncosto = delta\r\n  |> map(fn: (r) => ({ r with _value: (float(v: r.prelievo_oggi_wh) / 1000.0) * float(v: ${price}) }))\r\n  // Se non usi variabile Grafana, sostituisci la riga sopra con:\r\n  // |> map(fn: (r) => ({ r with _value: (float(v: r.prelievo_oggi_wh) / 1000.0) * 0.25 }))\r\n  |> rename(columns: {_value: \"costo_prelievo_oggi\"})\r\n  |> keep(columns: [\"_time\",\"costo_prelievo_oggi\"])\r\n\r\n// Output\r\ndelta |> yield(name: \"prelievo_oggi_wh\")\r\ncosto |> yield(name: \"costo_prelievo_oggi\")",
          "refId": "Costo Prelievo"
        }
      ],
      "timeFrom": "0d/d",
      "title": "Costo Prelievo",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "mappings": [
            {
              "options": {
                "1": {
                  "index": 8,
                  "text": "Aus"
                },
                "3": {
                  "index": 6,
                  "text": "Processo di avvio"
                },
                "5": {
                  "index": 4,
                  "text": "Limitato"
                },
                "6": {
                  "index": 3,
                  "text": "Spento"
                },
                "7": {
                  "index": 2,
                  "text": "Errore!"
                },
                "8": {
                  "index": 1,
                  "text": "Manutenzione"
                },
                "Producing": {
                  "color": "green",
                  "index": 5,
                  "text": "Produzione"
                },
                "Sleeping": {
                  "color": "transparent",
                  "index": 7,
                  "text": "Modalità notturna (disattivata)"
                }
              },
              "type": "value"
            },
            {
              "options": {
                "match": "null",
                "result": {
                  "index": 0,
                  "text": "N/A"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "rgb(240, 237, 236)",
                "value": 0
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Efficienza"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "decimals",
                "value": 1
              },
              {
                "id": "displayName",
                "value": "Efficienza"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "percentage",
                  "steps": [
                    {
                      "color": "dark-red",
                      "value": 0
                    },
                    {
                      "color": "semi-dark-green",
                      "value": 0
                    }
                  ]
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 3,
        "w": 4,
        "x": 18,
        "y": 11
      },
      "hideTimeOverride": true,
      "id": 20,
      "maxDataPoints": 100,
      "options": {
        "colorMode": "background",
        "fieldOptions": {
          "calcs": [
            "mean"
          ]
        },
        "graphMode": "area",
        "justifyMode": "center",
        "orientation": "horizontal",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "/^_value$/",
          "values": false
        },
        "showPercentChange": false,
        "text": {
          "valueSize": 25
        },
        "textMode": "value",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "cf0k9s806a29sd"
          },
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: -30m)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"Inverter_Text\" and\r\n    r.endpoint == \"Status\"\r\n  )\r\n  |> group(columns: [\"device_id\"])\r\n  |> last()\r\n  |> keep(columns: [\"endpoint\",\"_value\"])\r\n  |> yield(name: \"inverter_status\")",
          "refId": "Stato"
        }
      ],
      "timeFrom": "0d/d",
      "title": "Stato Inverter",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "fieldConfig": {
        "defaults": {
          "decimals": 2,
          "displayName": "Amperaggio",
          "mappings": [],
          "max": 15,
          "min": 0,
          "noValue": "0 A",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "red",
                "value": 0
              },
              {
                "color": "green",
                "value": 0.1
              }
            ]
          },
          "unit": "amp"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 2,
        "x": 22,
        "y": 12
      },
      "hideTimeOverride": true,
      "id": 63,
      "maxDataPoints": 100,
      "options": {
        "minVizHeight": 90,
        "minVizWidth": 75,
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "sizing": "auto",
        "text": {}
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "alias": "Volt",
          "datasource": {
            "type": "influxdb",
            "uid": "cf0k9s806a29sd"
          },
          "groupBy": [],
          "measurement": "inverter",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: -1m)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"Inverter\" and\r\n    r.endpoint == \"DC Current\" and\r\n    r.unit == \"A\"\r\n    // opzionale: r.device_id == \"TUO_INVERTER\"\r\n  )\r\n  |> group(columns: [])\r\n  |> last()\r\n  |> keep(columns: [\"_time\", \"_value\"])\r\n  |> yield(name: \"current_dc_last_A\")",
          "rawQuery": true,
          "refId": "Amperaggio",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "voltage_dc"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              }
            ]
          ],
          "tags": []
        }
      ],
      "timeFrom": "0d/d",
      "title": "",
      "transparent": true,
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "links": [],
          "mappings": [],
          "max": -1,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "light-yellow",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 0,
        "y": 14
      },
      "hideTimeOverride": true,
      "id": 62,
      "interval": "0s",
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "vertical",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [],
          "fields": "/^picco_w$/",
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "value",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "cf0k9s806a29sd"
          },
          "query": "import \"timezone\"\r\nimport \"date\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nstart = date.truncate(t: now(), unit: 1d)\r\nstop  = date.add(d: 1d, to: start)\r\n\r\n// Somma potenza AC degli inverter (W) ogni 5s, senza smussare\r\ninv_total = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: start, stop: stop)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"Inverter\" and\r\n    r.endpoint == \"Power\" and\r\n    r.unit == \"W\"\r\n  )\r\n  |> aggregateWindow(every: 5s, fn: last, createEmpty: false)\r\n  |> group(columns: [\"_time\"])\r\n  |> sum()\r\n  |> keep(columns: [\"_time\",\"_value\"])\r\n\r\n// Picco massimo giornaliero (W) con timestamp del picco\r\ninv_total\r\n  |> group(columns: [])\r\n  |> max(column: \"_value\")\r\n  |> rename(columns: {_value: \"picco_w\"})\r\n  |> yield(name: \"picco_produzione_oggi_W\")",
          "refId": "Picco Produzione"
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "0d/d",
      "title": "Picco Massimo di Produzione",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "links": [],
          "mappings": [],
          "noValue": "0.0 Wh",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "super-light-blue",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 3,
        "y": 14
      },
      "hideTimeOverride": true,
      "id": 61,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "vertical",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "max"
          ],
          "fields": "/^Picco_Massimo_OGGI picco_immissione$/",
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "value",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "cf0k9s806a29sd"
          },
          "query": "import \"timezone\"\r\nimport \"date\"\r\n\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\ntoday_start = date.truncate(t: now(), unit: 1d)\r\n\r\nfrom(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: today_start)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Meter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Power\")\r\n  |> filter(fn: (r) => exists r._value and r._value > 0)\r\n  |> max()\r\n  |> map(fn: (r) => ({\r\n    _time: now(),\r\n    \"Picco_Massimo_OGGI\": r._value,\r\n    _field: \"picco_immissione\"\r\n  }))\r\n",
          "refId": "Picco Massimo Immissione"
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "0d/d",
      "title": "Picco Massimo di Immissione",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-orange",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 6,
        "y": 14
      },
      "hideTimeOverride": true,
      "id": 70,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "vertical",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [],
          "fields": "/^Picco_Massimo_Consumo_OGGI$/",
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "value",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "eeutt541fflz4c"
          },
          "query": "import \"timezone\"\r\nimport \"date\"\r\n\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\ntoday_start = date.truncate(t: now(), unit: 1d)\r\n\r\ninverter_data = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: today_start)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Inverter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Power\")\r\n  |> filter(fn: (r) => exists r._value)\r\n  |> aggregateWindow(every: 30s, fn: mean, createEmpty: false)\r\n\r\nmeter_data = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: today_start)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Meter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Power\")\r\n  |> filter(fn: (r) => exists r._value)\r\n  |> aggregateWindow(every: 30s, fn: mean, createEmpty: false)\r\n\r\njoin(tables: {inverter: inverter_data, meter: meter_data}, on: [\"_time\"])\r\n  |> map(fn: (r) => ({\r\n    _time: r._time,\r\n    _value: if r._value_meter >= 0.0 then r._value_inverter - r._value_meter else r._value_inverter + (r._value_meter * -1.0)\r\n  }))\r\n  |> filter(fn: (r) => r._value > 0)\r\n  |> max()\r\n  |> map(fn: (r) => ({\r\n    _time: now(),\r\n    \"Picco_Massimo_Consumo_OGGI\": r._value,\r\n    _field: \"picco_consumo_oggi\"\r\n  }))\r\n",
          "refId": "Picco Consumo"
        }
      ],
      "timeFrom": "0d/d",
      "title": "Picco Massimo di Consumo",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "light-yellow",
            "mode": "thresholds"
          },
          "decimals": 2,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-green",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 9,
        "y": 14
      },
      "hideTimeOverride": true,
      "id": 69,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "/^autoconsumo_oggi_wh$/",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "cf0k9s806a29sd"
          },
          "query": "import \"timezone\"\r\nimport \"date\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nstart = date.truncate(t: now(), unit: 1d)\r\nstop  = date.add(d: 1d, to: start)\r\n\r\n// Delta giornaliero (last - first) per device, clamp ≥0 e somma\r\ndailyDeltaWh = (tables=<-) => {\r\n  f = tables\r\n    |> first()\r\n    |> keep(columns: [\"device_id\", \"_value\"])\r\n    |> set(key: \"kind\", value: \"start\")\r\n\r\n  l = tables\r\n    |> last()\r\n    |> keep(columns: [\"device_id\", \"_value\"])\r\n    |> set(key: \"kind\", value: \"end\")\r\n\r\n  return union(tables: [f, l])\r\n    |> pivot(rowKey: [\"device_id\"], columnKey: [\"kind\"], valueColumn: \"_value\")\r\n    |> map(fn: (r) => ({ r with _value: float(v: r.end) - float(v: r.start) }))\r\n    |> map(fn: (r) => ({ r with _value: if r._value < 0.0 then 0.0 else r._value }))\r\n    |> group(columns: [])\r\n    |> sum(column: \"_value\")\r\n}\r\n\r\n// Produzione (Inverter → Total Energy, Wh)\r\nprod_val = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: start, stop: stop)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"Inverter\" and\r\n    r.endpoint == \"Total Energy\" and\r\n    r.unit == \"Wh\"\r\n  )\r\n  |> group(columns: [\"device_id\"])\r\n  |> fill(usePrevious: true)\r\n  |> dailyDeltaWh()\r\n\r\n// Export (Meter → Export Energy, Wh)\r\nexp_val = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: start, stop: stop)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"Meter\" and\r\n    r.endpoint == \"Export Energy\" and\r\n    r.unit == \"Wh\"\r\n  )\r\n  |> group(columns: [\"device_id\"])\r\n  |> fill(usePrevious: true)\r\n  |> dailyDeltaWh()\r\n\r\n// Autoconsumo = Produzione − Export (Wh), clamp ≥0\r\nunion(tables: [\r\n    prod_val,\r\n    exp_val |> map(fn: (r) => ({ r with _value: -r._value }))\r\n  ])\r\n  |> group(columns: [])\r\n  |> sum(column: \"_value\")\r\n  |> map(fn: (r) => ({ r with _value: if r._value < 0.0 then 0.0 else r._value }))\r\n  |> rename(columns: {_value: \"autoconsumo_oggi_wh\"})\r\n  |> yield(name: \"autoconsumo_oggi_Wh\")",
          "refId": "Autoconsumo"
        }
      ],
      "timeFrom": "0d/d",
      "title": "Autoconsumo di oggi",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "light-yellow",
            "mode": "thresholds"
          },
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-green",
                "value": 0
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 12,
        "y": 14
      },
      "hideTimeOverride": true,
      "id": 60,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "/^Perc_Autoconsumo_OGGI$/",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "value",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "cf0k9s806a29sd"
          },
          "query": "import \"timezone\"\r\nimport \"date\"\r\n\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\ntoday_start = date.truncate(t: now(), unit: 1d)\r\n\r\n// Energia importata (prelievo)\r\nimportata = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: today_start)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Meter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Import Energy\")\r\n  |> filter(fn: (r) => exists r._value)\r\n  |> sort(columns: [\"_time\"])\r\n  |> reduce(\r\n    identity: {first: 0.0, last: 0.0, count: 0},\r\n    fn: (r, accumulator) => ({\r\n      first: if accumulator.count == 0 then r._value else accumulator.first,\r\n      last: r._value,\r\n      count: accumulator.count + 1\r\n    })\r\n  )\r\n  |> map(fn: (r) => ({ \r\n    _time: now(),\r\n    _value: (r.last - r.first),\r\n    _field: \"importata\" \r\n  }))\r\n\r\n// Energia prodotta\r\nprodotta = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: today_start)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Inverter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Total Energy\")\r\n  |> filter(fn: (r) => exists r._value)\r\n  |> sort(columns: [\"_time\"])\r\n  |> reduce(\r\n    identity: {first: 0.0, last: 0.0, count: 0},\r\n    fn: (r, accumulator) => ({\r\n      first: if accumulator.count == 0 then r._value else accumulator.first,\r\n      last: r._value,\r\n      count: accumulator.count + 1\r\n    })\r\n  )\r\n  |> map(fn: (r) => ({ \r\n    _time: now(),\r\n    _value: (r.last - r.first),\r\n    _field: \"prodotta\" \r\n  }))\r\n\r\n// Energia esportata\r\nesportata = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: today_start)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Meter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Export Energy\")\r\n  |> filter(fn: (r) => exists r._value)\r\n  |> sort(columns: [\"_time\"])\r\n  |> reduce(\r\n    identity: {first: 0.0, last: 0.0, count: 0},\r\n    fn: (r, accumulator) => ({\r\n      first: if accumulator.count == 0 then r._value else accumulator.first,\r\n      last: r._value,\r\n      count: accumulator.count + 1\r\n    })\r\n  )\r\n  |> map(fn: (r) => ({ \r\n    _time: now(),\r\n    _value: (r.last - r.first),\r\n    _field: \"esportata\" \r\n  }))\r\n\r\n// Union + Pivot per combinare tutti i dati\r\nunion(tables: [importata, prodotta, esportata])\r\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({\r\n    _time: now(),\r\n    autoconsumo_wh: r.prodotta - r.esportata,\r\n    consumo_totale_wh: r.importata + (r.prodotta - r.esportata),\r\n    \"Perc_Autoconsumo_OGGI\": if (r.importata + (r.prodotta - r.esportata)) > 0.0 then ((r.prodotta - r.esportata) / (r.importata + (r.prodotta - r.esportata))) * 100.0 else 0.0,\r\n    \"Autoconsumo_Wh_Debug\": r.prodotta - r.esportata,\r\n    \"Consumo_Totale_Wh_Debug\": r.importata + (r.prodotta - r.esportata),\r\n    \"Production_Wh_Debug\": r.prodotta,\r\n    \"Export_Wh_Debug\": r.esportata,\r\n    _field: \"percentuale_autoconsumo\"\r\n  }))\r\n",
          "refId": "% Autoconsumo"
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "0d/d",
      "title": "Percentuale Autoconsumo",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "light-yellow",
            "mode": "thresholds"
          },
          "decimals": 2,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-green",
                "value": 0
              }
            ]
          },
          "unit": "currencyEUR"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 15,
        "y": 14
      },
      "hideTimeOverride": true,
      "id": 180,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "horizontal",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "/^Risparmio_autoconsumo_oggi$/",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "eeutt541fflz4c"
          },
          "query": "import \"timezone\"\r\nimport \"date\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nstart = date.truncate(t: now(), unit: 1d)\r\nstop  = date.add(d: 1d, to: start)\r\n\r\n// Delta giornaliero (last - first) per device, clamp ≥0 e somma\r\ndailyDeltaWh = (tables=<-) => {\r\n  f = tables\r\n    |> first()\r\n    |> keep(columns: [\"device_id\", \"_value\"])\r\n    |> set(key: \"kind\", value: \"start\")\r\n\r\n  l = tables\r\n    |> last()\r\n    |> keep(columns: [\"device_id\", \"_value\"])\r\n    |> set(key: \"kind\", value: \"end\")\r\n\r\n  return union(tables: [f, l])\r\n    |> pivot(rowKey: [\"device_id\"], columnKey: [\"kind\"], valueColumn: \"_value\")\r\n    |> map(fn: (r) => ({ r with _value: float(v: r.end) - float(v: r.start) }))\r\n    |> map(fn: (r) => ({ r with _value: if r._value < 0.0 then 0.0 else r._value }))\r\n    |> group(columns: [])\r\n    |> sum(column: \"_value\")\r\n}\r\n\r\n// Produzione (Inverter → Total Energy, Wh)\r\nprod_val = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: start, stop: stop)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"Inverter\" and\r\n    r.endpoint == \"Total Energy\" and\r\n    r.unit == \"Wh\"\r\n  )\r\n  |> group(columns: [\"device_id\"])\r\n  |> fill(usePrevious: true)\r\n  |> dailyDeltaWh()\r\n\r\n// Export (Meter → Export Energy, Wh)\r\nexp_val = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: start, stop: stop)\r\n  |> filter(fn: (r) =>\r\n    r._measurement == \"realtime\" and\r\n    r._field == \"Meter\" and\r\n    r.endpoint == \"Export Energy\" and\r\n    r.unit == \"Wh\"\r\n  )\r\n  |> group(columns: [\"device_id\"])\r\n  |> fill(usePrevious: true)\r\n  |> dailyDeltaWh()\r\n\r\n// Autoconsumo (Wh) = Produzione − Export, clamp ≥ 0\r\nautoconsumo = union(tables: [\r\n    prod_val,\r\n    exp_val |> map(fn: (r) => ({ r with _value: -r._value }))\r\n  ])\r\n  |> group(columns: [])\r\n  |> sum(column: \"_value\")\r\n  |> map(fn: (r) => ({ r with _value: if r._value < 0.0 then 0.0 else r._value }))\r\n  |> map(fn: (r) => ({ r with _time: date.truncate(t: now(), unit: 1s) }))\r\n  |> rename(columns: {_value: \"autoconsumo_oggi_wh\"})\r\n  |> keep(columns: [\"_time\",\"autoconsumo_oggi_wh\"])\r\n\r\n// Costo Autoconsumo (EUR) = (Wh / 1000) * prezzo_kWh\r\nRisparmio_autoconsumo = autoconsumo\r\n  |> map(fn: (r) => ({ r with _value: (float(v: r.autoconsumo_oggi_wh) / 1000.0) * float(v: ${price}) }))\r\n  // Se non usi variabile Grafana, usa un numero fisso:\r\n  // |> map(fn: (r) => ({ r with _value: (float(v: r.autoconsumo_oggi_wh) / 1000.0) * 0.25 }))\r\n  |> rename(columns: {_value: \"Risparmio_autoconsumo_oggi\"})\r\n  |> keep(columns: [\"_time\",\"Risparmio_autoconsumo_oggi\"])\r\n\r\n// Output\r\nautoconsumo       |> yield(name: \"autoconsumo_oggi_Wh\")\r\nRisparmio_autoconsumo |> yield(name: \"Risparmio_autoconsumo_oggi\")",
          "refId": "Risparmio Autoconsumo"
        }
      ],
      "timeFrom": "0d/d",
      "title": "Risparmi Autoconsumo",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "mappings": [
            {
              "options": {
                "0": {
                  "color": "transparent",
                  "index": 0,
                  "text": "0  %"
                }
              },
              "type": "value"
            },
            {
              "options": {
                "from": 1,
                "result": {
                  "color": "dark-red",
                  "index": 1
                },
                "to": 50
              },
              "type": "range"
            },
            {
              "options": {
                "from": 51,
                "result": {
                  "color": "orange",
                  "index": 2
                },
                "to": 90
              },
              "type": "range"
            },
            {
              "options": {
                "from": 91,
                "result": {
                  "color": "green",
                  "index": 3
                },
                "to": 100
              },
              "type": "range"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "rgb(240, 237, 236)",
                "value": 0
              }
            ]
          },
          "unit": " %"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 4,
        "x": 18,
        "y": 14
      },
      "hideTimeOverride": true,
      "id": 194,
      "maxDataPoints": 100,
      "options": {
        "colorMode": "background",
        "fieldOptions": {
          "calcs": [
            "mean"
          ]
        },
        "graphMode": "area",
        "justifyMode": "center",
        "orientation": "horizontal",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "/^Value$/",
          "values": false
        },
        "showPercentChange": false,
        "text": {
          "valueSize": 25
        },
        "textMode": "value",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "cf0k9s806a29sd"
          },
          "query": "import \"array\"\r\n\r\nac_value = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: -1h)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Inverter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Power\")\r\n  |> filter(fn: (r) => exists r._value)\r\n  |> last()\r\n  |> findRecord(fn: (key) => true, idx: 0)\r\n\r\ndc_value = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: -1h)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Inverter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"DC Power\")\r\n  |> filter(fn: (r) => exists r._value)\r\n  |> last()\r\n  |> findRecord(fn: (key) => true, idx: 0)\r\n\r\narray.from(rows: [{\r\n  _time: now(),\r\n  _value: if dc_value._value > 0.0 then (ac_value._value / dc_value._value) * 100.0 else 0.0\r\n}])\r\n",
          "refId": "Efficienza"
        }
      ],
      "timeFrom": "0d/d",
      "title": "Efficienza",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "-- Mixed --"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "Potenza (W)",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 40,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "showValues": false,
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Produzione"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#FADE2A",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Consumo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#FF7383",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Immissione"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#5794F2",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Autoconsumo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Sun altitude"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "yellow",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.fillOpacity",
                "value": 10
              },
              {
                "id": "custom.lineWidth",
                "value": 1
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "custom.axisLabel",
                "value": "Altitudine Solare"
              },
              {
                "id": "custom.lineStyle",
                "value": {
                  "dash": [
                    5,
                    10
                  ],
                  "fill": "dash"
                }
              },
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 12,
        "w": 12,
        "x": 0,
        "y": 17
      },
      "hideTimeOverride": true,
      "id": 183,
      "maxDataPoints": 2198,
      "options": {
        "legend": {
          "calcs": [
            "mean"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "tooltip": {
          "hideZeros": false,
          "maxHeight": 600,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "bf0oalwayysqoa"
          },
          "query": "import \"timezone\"\r\nimport \"date\"\r\n\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\ntoday_start = date.truncate(t: now(), unit: 1d)\r\n\r\nfrom(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: today_start)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Inverter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Power\")\r\n  |> filter(fn: (r) => exists r._value)\r\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({\r\n    _time: r._time,\r\n    \"Produzione\": r._value\r\n  }))\r\n",
          "refId": "Produzione"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "bf0oalwayysqoa"
          },
          "hide": false,
          "query": "import \"timezone\"\r\nimport \"date\"\r\n\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\ntoday_start = date.truncate(t: now(), unit: 1d)\r\n\r\nproduzione = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: today_start)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Inverter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Power\")\r\n  |> filter(fn: (r) => exists r._value)\r\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _field: \"produzione\" }))\r\n\r\nmeter = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: today_start)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Meter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Power\")\r\n  |> filter(fn: (r) => exists r._value)\r\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _field: \"meter\" }))\r\n\r\njoin(tables: {prod: produzione, met: meter}, on: [\"_time\"])\r\n  |> map(fn: (r) => ({\r\n    _time: r._time,\r\n    \"Consumo\": r._value_prod - r._value_met\r\n  }))\r\n  |> filter(fn: (r) => r.Consumo >= 0)\r\n",
          "refId": "Consumo"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "bf0oalwayysqoa"
          },
          "hide": false,
          "query": "import \"timezone\"\r\nimport \"date\"\r\n\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\ntoday_start = date.truncate(t: now(), unit: 1d)\r\n\r\nfrom(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: today_start)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Meter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Power\")\r\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({\r\n      _time: r._time,\r\n      \"Immissione\": if r._value < 0.0 then 0.0 else r._value\r\n    }))\r\n",
          "refId": "Immissione"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "bf0oalwayysqoa"
          },
          "hide": false,
          "query": "import \"timezone\"\r\nimport \"date\"\r\n\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\ntoday_start = date.truncate(t: now(), unit: 1d)\r\n\r\nproduzione = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: today_start)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Inverter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Power\")\r\n  |> filter(fn: (r) => exists r._value)\r\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _field: \"produzione\" }))\r\n\r\nimmissione = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: today_start)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Meter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Power\")\r\n  |> filter(fn: (r) => exists r._value)\r\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _field: \"immissione\" }))\r\n\r\njoin(tables: {prod: produzione, imm: immissione}, on: [\"_time\"])\r\n  |> map(fn: (r) => ({\r\n    _time: r._time,\r\n    \"Autoconsumo\": if r._value_imm >= 0.0 then r._value_prod - r._value_imm else r._value_prod\r\n  }))\r\n  |> filter(fn: (r) => r.Autoconsumo >= 0)\r\n",
          "refId": "Autoconsumo"
        },
        {
          "datasource": {
            "type": "fetzerch-sunandmoon-datasource",
            "uid": "bf0okp4gk3hmod"
          },
          "hide": false,
          "query": "",
          "refId": "A",
          "target": [
            "sun_altitude"
          ]
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "0d/d",
      "title": "Produzione - Consumo - Autoconsumo - Prelievo - Immissione (Oggi)",
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "-- Mixed --"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "Potenza (W)",
            "axisPlacement": "left",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 40,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "showValues": false,
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Produzione"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#FADE2A",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Consumo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#FF7383",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Immissione"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#5794F2",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Autoconsumo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Sun altitude"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "yellow",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.fillOpacity",
                "value": 8
              },
              {
                "id": "custom.lineWidth",
                "value": 1
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "custom.axisLabel",
                "value": "Altitudine Solare"
              },
              {
                "id": "custom.lineStyle",
                "value": {
                  "dash": [
                    10,
                    10
                  ],
                  "fill": "dash"
                }
              },
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 12,
        "w": 12,
        "x": 12,
        "y": 17
      },
      "hideTimeOverride": true,
      "id": 181,
      "maxDataPoints": 2198,
      "options": {
        "legend": {
          "calcs": [
            "mean"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "tooltip": {
          "hideZeros": false,
          "maxHeight": 600,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "bf0oalwayysqoa"
          },
          "hide": false,
          "query": "import \"timezone\"\r\nimport \"date\"\r\n\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nyesterday_start = date.truncate(t: date.sub(d: 1d, from: now()), unit: 1d)\r\nyesterday_end = date.add(d: 1d, to: yesterday_start)\r\n\r\n\r\nfrom(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: yesterday_start, stop: yesterday_end)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Inverter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Power\")\r\n  |> filter(fn: (r) => exists r._value)\r\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({\r\n    _time: r._time,\r\n    \"Produzione\": r._value\r\n  }))\r\n",
          "refId": "Produzione"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "bf0oalwayysqoa"
          },
          "hide": false,
          "query": "import \"timezone\"\r\nimport \"date\"\r\n\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nyesterday_start = date.truncate(t: date.sub(d: 1d, from: now()), unit: 1d)\r\nyesterday_end = date.add(d: 1d, to: yesterday_start)\r\n\r\nproduzione = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: yesterday_start, stop: yesterday_end)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Inverter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Power\")\r\n  |> filter(fn: (r) => exists r._value)\r\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _field: \"produzione\" }))\r\n\r\nmeter = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: yesterday_start, stop: yesterday_end)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Meter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Power\")\r\n  |> filter(fn: (r) => exists r._value)\r\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _field: \"meter\" }))\r\n\r\njoin(tables: {prod: produzione, met: meter}, on: [\"_time\"])\r\n  |> map(fn: (r) => ({\r\n    _time: r._time,\r\n    \"Consumo\": r._value_prod - r._value_met\r\n  }))\r\n  |> filter(fn: (r) => r.Consumo >= 0)\r\n",
          "refId": "Consumo"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "bf0oalwayysqoa"
          },
          "hide": false,
          "query": "import \"timezone\"\r\nimport \"date\"\r\n\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nyesterday_start = date.truncate(t: date.sub(d: 1d, from: now()), unit: 1d)\r\nyesterday_end = date.add(d: 1d, to: yesterday_start)\r\n\r\nfrom(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: yesterday_start, stop: yesterday_end)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Meter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Power\")\r\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({\r\n      _time: r._time,\r\n      \"Immissione\": if r._value < 0.0 then 0.0 else r._value\r\n    }))\r\n",
          "refId": "Immissione"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "bf0oalwayysqoa"
          },
          "hide": false,
          "query": "import \"timezone\"\r\nimport \"date\"\r\n\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nyesterday_start = date.truncate(t: date.sub(d: 1d, from: now()), unit: 1d)\r\nyesterday_end = date.add(d: 1d, to: yesterday_start)\r\n\r\nproduzione = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: yesterday_start, stop: yesterday_end)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Inverter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Power\")\r\n  |> filter(fn: (r) => exists r._value)\r\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _field: \"produzione\" }))\r\n\r\nimmissione = from(bucket: \"Solaredge_Realtime\")\r\n  |> range(start: yesterday_start, stop: yesterday_end)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"realtime\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Meter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"Power\")\r\n  |> filter(fn: (r) => exists r._value)\r\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\r\n  |> map(fn: (r) => ({ r with _field: \"immissione\" }))\r\n\r\njoin(tables: {prod: produzione, imm: immissione}, on: [\"_time\"])\r\n  |> map(fn: (r) => ({\r\n    _time: r._time,\r\n    \"Autoconsumo\": if r._value_imm >= 0.0 then r._value_prod - r._value_imm else r._value_prod\r\n  }))\r\n  |> filter(fn: (r) => r.Autoconsumo >= 0)\r\n",
          "refId": "Autoconsumo"
        },
        {
          "datasource": {
            "type": "fetzerch-sunandmoon-datasource",
            "uid": "bf0okp4gk3hmod"
          },
          "hide": false,
          "latitude": "40.8199",
          "longitude": "14.3413",
          "refId": "A",
          "target": [
            "sun_altitude"
          ]
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "1d/d",
      "title": "Produzione - Consumo - Autoconsumo - Prelievo - Immissione (Ieri)",
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "Energia (KWh)",
            "axisPlacement": "auto",
            "fillOpacity": 80,
            "gradientMode": "hue",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1,
            "scaleDistribution": {
              "type": "linear"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 2,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "yellow",
                "value": 0
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Produzione"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "yellow",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Consumo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "orange",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Autoconsumo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Prelievo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Immissione"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "blue",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 14,
        "w": 23,
        "x": 0,
        "y": 29
      },
      "id": 6,
      "options": {
        "barRadius": 0,
        "barWidth": 0.97,
        "fullHighlight": false,
        "groupWidth": 0.9,
        "legend": {
          "calcs": [
            "mean"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "orientation": "auto",
        "showValue": "always",
        "stacking": "none",
        "tooltip": {
          "hideZeros": false,
          "maxHeight": 600,
          "mode": "single",
          "sort": "none"
        },
        "xField": "_time",
        "xTickLabelRotation": 0,
        "xTickLabelSpacing": 100
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"Solaredge\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"api\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Meter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"site_energy_details\")\r\n  |> filter(fn: (r) => r[\"metric\"] == \"Production\")\r\n  |> aggregateWindow(every: 1d, fn: sum, createEmpty: true)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> fill(value: 0.0)\r\n  |> map(fn: (r) => ({ r with _field: \"Produzione\" }))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])\r\n",
          "refId": "Produzione"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"Solaredge\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"api\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Meter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"site_energy_details\")\r\n  |> filter(fn: (r) => r[\"metric\"] == \"Consumption\")\r\n  |> aggregateWindow(every: 1d, fn: sum, createEmpty: true)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> fill(value: 0.0)\r\n  |> map(fn: (r) => ({ r with _field: \"Consumo\" }))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])\r\n",
          "refId": "Consumo"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"Solaredge\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"api\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Meter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"site_energy_details\")\r\n  |> filter(fn: (r) => r[\"metric\"] == \"SelfConsumption\")\r\n  |> aggregateWindow(every: 1d, fn: sum, createEmpty: true)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> fill(value: 0.0)\r\n  |> map(fn: (r) => ({ r with _field: \"Autoconsumo\" }))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])\r\n",
          "refId": "Autoconsumo"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"Solaredge\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"api\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Meter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"site_energy_details\")\r\n  |> filter(fn: (r) => r[\"metric\"] == \"Purchased\")\r\n  |> aggregateWindow(every: 1d, fn: sum, createEmpty: true)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> fill(value: 0.0)\r\n  |> map(fn: (r) => ({ r with _field: \"Prelievo\" }))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])\r\n",
          "refId": "Prelievo"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"Solaredge\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"api\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"Meter\")\r\n  |> filter(fn: (r) => r[\"endpoint\"] == \"site_energy_details\")\r\n  |> filter(fn: (r) => r[\"metric\"] == \"FeedIn\")\r\n  |> aggregateWindow(every: 1d, fn: sum, createEmpty: true)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> fill(value: 0.0)\r\n  |> map(fn: (r) => ({ r with _field: \"Immissione\" }))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])\r\n",
          "refId": "Immissione"
        }
      ],
      "title": "Produzione - Consumo - Autoconsumo - Prelievo - Immissione (Periodo Selezionato)",
      "type": "barchart"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "bf0oalwayysqoa"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 2,
          "displayName": "Produzione",
          "mappings": [],
          "noValue": "Produzione 0kWh",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "yellow",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": ""
            },
            "properties": []
          }
        ]
      },
      "gridPos": {
        "h": 2,
        "w": 1,
        "x": 23,
        "y": 29
      },
      "id": 121,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "alias": "Produzione",
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"production\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1d, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> yield(name: \"Produzione\")\r\n",
          "rawQuery": true,
          "refId": "Produzione",
          "resultFormat": "time_series"
        }
      ],
      "title": "",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "HVjeTNd7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "orange",
            "mode": "fixed"
          },
          "decimals": 2,
          "displayName": "Consumo",
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "yellow",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 1,
        "x": 23,
        "y": 31
      },
      "id": 122,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "vertical",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"consumption\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1d, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> yield(name: \"Consumo\")",
          "refId": "Consumo"
        }
      ],
      "title": "",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "HVjeTNd7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "dark-green",
            "mode": "fixed"
          },
          "decimals": 2,
          "displayName": "Autoconsumo",
          "mappings": [],
          "noValue": "Autoconsumo 0kWh",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "yellow",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 1,
        "x": 23,
        "y": 33
      },
      "id": 123,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"selfconsumption\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1d, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])  \r\n  |> yield(name: \"Autoconsumo\")",
          "refId": "Autoconsumo"
        }
      ],
      "title": "",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "HVjeTNd7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "dark-red",
            "mode": "fixed"
          },
          "decimals": 2,
          "displayName": "Prelievo",
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "yellow",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 1,
        "x": 23,
        "y": 35
      },
      "id": 124,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"purchased\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1d, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> yield(name: \"Prelievo\")",
          "refId": "Prelievo"
        }
      ],
      "title": "",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "HVjeTNd7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "blue",
            "mode": "fixed"
          },
          "decimals": 2,
          "displayName": "Immissione",
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "yellow",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 1,
        "x": 23,
        "y": 37
      },
      "id": 125,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"feedin\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1d, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> yield(name: \"Immissione\")",
          "refId": "Immissione"
        }
      ],
      "title": "",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "-- Mixed --"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "light-yellow",
            "mode": "thresholds"
          },
          "displayName": "% Autoconsumo",
          "mappings": [],
          "max": 100,
          "min": 0,
          "noValue": "Autoconsumo 0%",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-green",
                "value": 0
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 1,
        "x": 23,
        "y": 39
      },
      "id": 144,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": true,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"production\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1y, fn: sum, createEmpty: false)\r\n  |> yield(name: \"Produzione\")",
          "refId": "Produzione"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": true,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"purchased\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1y, fn: sum, createEmpty: false)\r\n  |> yield(name: \"Prelievo\")",
          "refId": "Prelievo"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": true,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"feedin\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1y, fn: sum, createEmpty: false)\r\n  |> yield(name: \"Immissione\")",
          "refId": "Immissione"
        },
        {
          "datasource": {
            "name": "Expression",
            "type": "__expr__",
            "uid": "__expr__"
          },
          "expression": "(($Produzione - $Immissione) / ($Prelievo + $Produzione - $Immissione)) * 100",
          "hide": false,
          "refId": "% Autoconsumo",
          "type": "math"
        }
      ],
      "title": "",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "-- Mixed --"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "light-yellow",
            "mode": "thresholds"
          },
          "displayName": "% Prelievo",
          "mappings": [],
          "max": 100,
          "min": 0,
          "noValue": "Prelievo 100%",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-red",
                "value": 0
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 1,
        "x": 23,
        "y": 41
      },
      "id": 172,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": false
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": true,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"production\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1y, fn: sum, createEmpty: false)\r\n  |> yield(name: \"Produzione\")",
          "refId": "Produzione"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": true,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"purchased\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1y, fn: sum, createEmpty: false)\r\n  |> yield(name: \"Prelievo\")",
          "refId": "Prelievo2"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": true,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"feedin\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1y, fn: sum, createEmpty: false)\r\n  |> yield(name: \"Immissione\")",
          "refId": "Immissione"
        },
        {
          "datasource": {
            "name": "Expression",
            "type": "__expr__",
            "uid": "__expr__"
          },
          "expression": "$Prelievo2 / ($Prelievo2 + $Produzione - $Immissione) * 100",
          "hide": false,
          "refId": "% Prelievo",
          "type": "math"
        }
      ],
      "title": "",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "HVjeTNd7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "Energia (KWh)",
            "axisPlacement": "auto",
            "axisSoftMin": 0,
            "fillOpacity": 83,
            "gradientMode": "hue",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1,
            "scaleDistribution": {
              "type": "linear"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 2,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Produzione"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "yellow",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Consumo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "orange",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Autoconsumo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Prelievo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Immissione"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "blue",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 14,
        "w": 23,
        "x": 0,
        "y": 43
      },
      "hideTimeOverride": true,
      "id": 72,
      "interval": "1d",
      "maxDataPoints": 3,
      "options": {
        "barRadius": 0,
        "barWidth": 0.97,
        "fullHighlight": false,
        "groupWidth": 0.65,
        "legend": {
          "calcs": [
            "mean"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "orientation": "auto",
        "showValue": "auto",
        "stacking": "none",
        "tooltip": {
          "hideZeros": false,
          "maxHeight": 600,
          "mode": "single",
          "sort": "none"
        },
        "xField": "Time",
        "xTickLabelMaxLength": 0,
        "xTickLabelRotation": 0,
        "xTickLabelSpacing": 0
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"production\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1mo, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> map(fn: (r) => ({ r with _field: \"Produzione\" }))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])\r\n  |> yield(name: \"Produzione\")\r\n",
          "refId": "Produzione"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"consumption\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1mo, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> map(fn: (r) => ({ r with _field: \"Consumo\" }))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])\r\n  |> yield(name: \"Consumo\")\r\n",
          "refId": "Consumo"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"selfconsumption\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1mo, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> map(fn: (r) => ({ r with _field: \"Autoconsumo\" }))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])\r\n  |> yield(name: \"Autoconsumo\")\r\n",
          "refId": "Autoconsumo"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"purchased\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1mo, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> map(fn: (r) => ({ r with _field: \"Prelievo\" }))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])\r\n  |> yield(name: \"Prelievo\")\r\n",
          "refId": "Prelievo"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"feedin\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1mo, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> map(fn: (r) => ({ r with _field: \"Immissione\" }))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])\r\n  |> yield(name: \"Immissione\")\r\n",
          "refId": "Immissione"
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "0y/y",
      "title": "Produzione - Consumo - Autoconsumo - Prelievo - Immissione (Anno Corrente)",
      "transparent": true,
      "type": "barchart"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "HVjeTNd7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 2,
          "displayName": "Produzione",
          "mappings": [],
          "noValue": "Produzione 0kWh",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "yellow",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": ""
            },
            "properties": []
          }
        ]
      },
      "gridPos": {
        "h": 2,
        "w": 1,
        "x": 23,
        "y": 43
      },
      "hideTimeOverride": true,
      "id": 173,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "alias": "Produzione",
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"production\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1d, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> yield(name: \"Produzione\")\r\n",
          "rawQuery": true,
          "refId": "Produzione",
          "resultFormat": "time_series"
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "0y/y",
      "title": "",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "HVjeTNd7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "orange",
            "mode": "fixed"
          },
          "decimals": 2,
          "displayName": "Consumo",
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "yellow",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 1,
        "x": 23,
        "y": 45
      },
      "hideTimeOverride": true,
      "id": 174,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "vertical",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"consumption\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1d, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> yield(name: \"Consumo\")",
          "refId": "Consumo"
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "0y/y",
      "title": "",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "HVjeTNd7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "dark-green",
            "mode": "fixed"
          },
          "decimals": 2,
          "displayName": "Autoconsumo",
          "mappings": [],
          "noValue": "Autoconsumo 0kWh",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "yellow",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 1,
        "x": 23,
        "y": 47
      },
      "hideTimeOverride": true,
      "id": 175,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"selfconsumption\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1d, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])  \r\n  |> yield(name: \"Autoconsumo\")",
          "refId": "Autoconsumo"
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "0y/y",
      "title": "",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "HVjeTNd7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "dark-red",
            "mode": "fixed"
          },
          "decimals": 2,
          "displayName": "Prelievo",
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "yellow",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 1,
        "x": 23,
        "y": 49
      },
      "hideTimeOverride": true,
      "id": 176,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"purchased\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1d, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> yield(name: \"Prelievo\")",
          "refId": "Prelievo"
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "0y/y",
      "title": "",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "HVjeTNd7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "blue",
            "mode": "fixed"
          },
          "decimals": 2,
          "displayName": "Immissione",
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "yellow",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 1,
        "x": 23,
        "y": 51
      },
      "hideTimeOverride": true,
      "id": 178,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"feedin\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1d, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> yield(name: \"Immissione\")",
          "refId": "Immissione"
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "0y/y",
      "title": "",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "-- Mixed --"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "light-yellow",
            "mode": "thresholds"
          },
          "displayName": "% Autoconsumo",
          "mappings": [],
          "max": 100,
          "min": 0,
          "noValue": "Autoconsumo 0%",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-green",
                "value": 0
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 1,
        "x": 23,
        "y": 53
      },
      "hideTimeOverride": true,
      "id": 190,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": false
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": true,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"production\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1y, fn: sum, createEmpty: false)\r\n  |> yield(name: \"Produzione\")",
          "refId": "Produzione"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": true,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"purchased\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1y, fn: sum, createEmpty: false)\r\n  |> yield(name: \"Prelievo\")",
          "refId": "Prelievo"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": true,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"feedin\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1y, fn: sum, createEmpty: false)\r\n  |> yield(name: \"Immissione\")",
          "refId": "Immissione"
        },
        {
          "datasource": {
            "name": "Expression",
            "type": "__expr__",
            "uid": "__expr__"
          },
          "expression": "(($Produzione - $Immissione) / ($Prelievo + $Produzione - $Immissione)) * 100",
          "hide": false,
          "refId": "% Autoconsumo",
          "type": "math"
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "0y/y",
      "title": "",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "-- Mixed --"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "light-yellow",
            "mode": "thresholds"
          },
          "mappings": [],
          "max": 100,
          "min": 0,
          "noValue": "Prelievo 100%",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-red",
                "value": 0
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 1,
        "x": 23,
        "y": 55
      },
      "hideTimeOverride": true,
      "id": 177,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": false
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": true,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"production\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1y, fn: sum, createEmpty: false)\r\n  |> yield(name: \"Produzione\")",
          "refId": "Produzione"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": true,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"purchased\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1y, fn: sum, createEmpty: false)\r\n  |> yield(name: \"Prelievo\")",
          "refId": "Prelievo2"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": true,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"feedin\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1y, fn: sum, createEmpty: false)\r\n  |> yield(name: \"Immissione\")",
          "refId": "Immissione"
        },
        {
          "datasource": {
            "name": "Expression",
            "type": "__expr__",
            "uid": "__expr__"
          },
          "expression": "$Prelievo2 / ($Prelievo2 + $Produzione - $Immissione) * 100",
          "hide": false,
          "refId": "% Prelievo",
          "type": "math"
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "0y/y",
      "title": "",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "HVjeTNd7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "Energia (KWh)",
            "axisPlacement": "auto",
            "axisSoftMin": 0,
            "fillOpacity": 83,
            "gradientMode": "hue",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1,
            "scaleDistribution": {
              "type": "linear"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Produzione"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "yellow",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Consumo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "orange",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Autoconsumo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Prelievo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Immissione"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "blue",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 14,
        "w": 23,
        "x": 0,
        "y": 57
      },
      "hideTimeOverride": true,
      "id": 162,
      "interval": "1d",
      "maxDataPoints": 3,
      "options": {
        "barRadius": 0,
        "barWidth": 0.97,
        "fullHighlight": false,
        "groupWidth": 0.65,
        "legend": {
          "calcs": [
            "mean"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "orientation": "auto",
        "showValue": "auto",
        "stacking": "none",
        "tooltip": {
          "hideZeros": false,
          "maxHeight": 600,
          "mode": "single",
          "sort": "none"
        },
        "xField": "Time",
        "xTickLabelMaxLength": 0,
        "xTickLabelRotation": 0,
        "xTickLabelSpacing": 0
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"production\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1mo, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> map(fn: (r) => ({ r with _field: \"Produzione\" }))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])\r\n  |> yield(name: \"Produzione\")\r\n",
          "refId": "Produzione"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"consumption\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1mo, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> map(fn: (r) => ({ r with _field: \"Consumo\" }))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])\r\n  |> yield(name: \"Consumo\")\r\n",
          "refId": "Consumo"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"selfconsumption\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1mo, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> map(fn: (r) => ({ r with _field: \"Autoconsumo\" }))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])\r\n  |> yield(name: \"Autoconsumo\")\r\n",
          "refId": "Autoconsumo"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"purchased\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1mo, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> map(fn: (r) => ({ r with _field: \"Prelievo\" }))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])\r\n  |> yield(name: \"Prelievo\")\r\n",
          "refId": "Prelievo"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"feedin\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1mo, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> map(fn: (r) => ({ r with _field: \"Immissione\" }))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])\r\n  |> yield(name: \"Immissione\")\r\n",
          "refId": "Immissione"
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "1y/y",
      "title": "Produzione - Consumo - Autoconsumo - Prelievo - Immissione (Anno Precedente)",
      "type": "barchart"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "HVjeTNd7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 2,
          "displayName": "Produzione",
          "mappings": [],
          "noValue": "Produzione 0kWh",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "yellow",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": ""
            },
            "properties": []
          }
        ]
      },
      "gridPos": {
        "h": 2,
        "w": 1,
        "x": 23,
        "y": 57
      },
      "hideTimeOverride": true,
      "id": 185,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "alias": "Produzione",
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"production\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1d, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> yield(name: \"Produzione\")\r\n",
          "rawQuery": true,
          "refId": "Produzione",
          "resultFormat": "time_series"
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "1y/y",
      "title": "",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "HVjeTNd7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "orange",
            "mode": "fixed"
          },
          "decimals": 2,
          "displayName": "Consumo",
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "yellow",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 1,
        "x": 23,
        "y": 59
      },
      "hideTimeOverride": true,
      "id": 186,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"consumption\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1d, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> yield(name: \"Consumo\")",
          "refId": "Consumo"
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "1y/y",
      "title": "",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "HVjeTNd7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "dark-green",
            "mode": "fixed"
          },
          "decimals": 2,
          "displayName": "Autoconsumo",
          "mappings": [],
          "noValue": "Autoconsumo 0kWh",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "yellow",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 1,
        "x": 23,
        "y": 61
      },
      "hideTimeOverride": true,
      "id": 187,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"selfconsumption\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1d, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])  \r\n  |> yield(name: \"Autoconsumo\")",
          "refId": "Autoconsumo"
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "1y/y",
      "title": "",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "HVjeTNd7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "dark-red",
            "mode": "fixed"
          },
          "decimals": 2,
          "displayName": "Prelievo",
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "yellow",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 1,
        "x": 23,
        "y": 63
      },
      "hideTimeOverride": true,
      "id": 188,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"purchased\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1d, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> yield(name: \"Prelievo\")",
          "refId": "Prelievo"
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "1y/y",
      "title": "",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "HVjeTNd7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "blue",
            "mode": "fixed"
          },
          "decimals": 2,
          "displayName": "Immissione",
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "yellow",
                "value": 0
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 1,
        "x": 23,
        "y": 65
      },
      "hideTimeOverride": true,
      "id": 189,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"feedin\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1d, fn: sum, createEmpty: false)\r\n  |> timeShift(duration: -1s, columns: [\"_time\"])\r\n  |> yield(name: \"Immissione\")",
          "refId": "Immissione"
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "1y/y",
      "title": "",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "-- Mixed --"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "light-yellow",
            "mode": "thresholds"
          },
          "displayName": "% Autoconsumo",
          "mappings": [],
          "max": 100,
          "min": 0,
          "noValue": "Autoconsumo 0%",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-green",
                "value": 0
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 1,
        "x": 23,
        "y": 67
      },
      "hideTimeOverride": true,
      "id": 179,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": true,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"production\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1y, fn: sum, createEmpty: false)\r\n  |> yield(name: \"Produzione\")",
          "refId": "Produzione"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": true,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"purchased\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1y, fn: sum, createEmpty: false)\r\n  |> yield(name: \"Prelievo\")",
          "refId": "Prelievo"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": true,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"feedin\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1y, fn: sum, createEmpty: false)\r\n  |> yield(name: \"Immissione\")",
          "refId": "Immissione"
        },
        {
          "datasource": {
            "name": "Expression",
            "type": "__expr__",
            "uid": "__expr__"
          },
          "expression": "(($Produzione - $Immissione) / ($Prelievo + $Produzione - $Immissione)) * 100",
          "hide": false,
          "refId": "% Autoconsumo",
          "type": "math"
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "1y/y",
      "title": "",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "-- Mixed --"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "light-yellow",
            "mode": "thresholds"
          },
          "displayName": "% Prelievo",
          "mappings": [],
          "max": 100,
          "min": 0,
          "noValue": "Prelievo 100%",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-red",
                "value": 0
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 1,
        "x": 23,
        "y": 69
      },
      "hideTimeOverride": true,
      "id": 191,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "limit": 1,
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": false
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": true,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"production\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1y, fn: sum, createEmpty: false)\r\n  |> yield(name: \"Produzione\")",
          "refId": "Produzione"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": true,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"purchased\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1y, fn: sum, createEmpty: false)\r\n  |> yield(name: \"Prelievo\")",
          "refId": "Prelievo2"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": true,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"type\"] == \"feedin\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"wh\")\r\n  |> aggregateWindow(every: 1y, fn: sum, createEmpty: false)\r\n  |> yield(name: \"Immissione\")",
          "refId": "Immissione"
        },
        {
          "datasource": {
            "name": "Expression",
            "type": "__expr__",
            "uid": "__expr__"
          },
          "expression": "$Prelievo2 / ($Prelievo2 + $Produzione - $Immissione) * 100",
          "hide": false,
          "refId": "% Prelievo",
          "type": "math"
        }
      ],
      "timeFrom": "0d/d",
      "timeShift": "1y/y",
      "title": "",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "HVjeTNd7z"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": true,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "kWh",
            "axisPlacement": "auto",
            "fillOpacity": 83,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1,
            "scaleDistribution": {
              "type": "linear"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "max": 1150,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 12,
        "w": 24,
        "x": 0,
        "y": 71
      },
      "hideTimeOverride": true,
      "id": 193,
      "options": {
        "barRadius": 0,
        "barWidth": 0.97,
        "fullHighlight": false,
        "groupWidth": 0.65,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "orientation": "auto",
        "showValue": "never",
        "stacking": "none",
        "text": {
          "valueSize": 14
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        },
        "xField": "month_name",
        "xTickLabelRotation": 0,
        "xTickLabelSpacing": 0
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "query": "from(bucket: \"solaredge_cloud\")\r\n|> range(start: 2020-01-01T00:00:00Z)\r\n|> filter(fn: (r) =>\r\nr._measurement == \"energy_month\" and\r\nr._field == \"kwh\" and\r\nr.site == \"2489781\" and\r\nr.type == \"production\"\r\n)\r\n|> keep(columns: [\"_time\",\"_value\",\"year\",\"month\"])\r\n// garantisci 1 record per coppia anno-mese (in caso di riscritture)\r\n|> group(columns: [\"year\",\"month\"])\r\n|> last()\r\n// aggiungi etichetta mese in italiano per l asse X\r\n|> map(fn: (r) => ({\r\nr with\r\nmonth_name:\r\nif r.month == \"01\" then \"Gennaio\" else\r\nif r.month == \"02\" then \"Febbraio\" else\r\nif r.month == \"03\" then \"Marzo\" else\r\nif r.month == \"04\" then \"Aprile\" else\r\nif r.month == \"05\" then \"Maggio\" else\r\nif r.month == \"06\" then \"Giugno\" else\r\nif r.month == \"07\" then \"Luglio\" else\r\nif r.month == \"08\" then \"Agosto\" else\r\nif r.month == \"09\" then \"Settembre\" else\r\nif r.month == \"10\" then \"Ottobre\" else\r\nif r.month == \"11\" then \"Novembre\" else \"Dicembre\"\r\n}))\r\n// trasforma righe (mesi) in X e colonne (anni) in serie\r\n|> group()\r\n|> pivot(rowKey: [\"month\",\"month_name\"], columnKey: [\"year\"], valueColumn: \"_value\")\r\n// ordina 01..12 così l asse X è corretto\r\n|> sort(columns: [\"month\"])",
          "rawQuery": true,
          "refId": "A"
        }
      ],
      "timeFrom": "30y",
      "title": "New panel",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "month": false,
              "month_name": false
            },
            "includeByName": {},
            "indexByName": {
              "2021": 0,
              "2022": 1,
              "2023": 2,
              "2024": 3,
              "2025": 4,
              "month": 5,
              "month_name": 6
            },
            "renameByName": {}
          }
        }
      ],
      "type": "barchart"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "-- Mixed --"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "Potenza (W)",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "showValues": false,
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Sun altitude"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#FADE2A",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.fillOpacity",
                "value": 10
              },
              {
                "id": "custom.lineWidth",
                "value": 1
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "custom.axisLabel",
                "value": "Altitudine Solare"
              },
              {
                "id": "custom.lineStyle",
                "value": {
                  "dash": [
                    5,
                    10
                  ],
                  "fill": "dash"
                }
              },
              {
                "id": "custom.axisPlacement",
                "value": "right"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 14,
        "w": 24,
        "x": 0,
        "y": 83
      },
      "id": 99,
      "interval": "15m",
      "options": {
        "legend": {
          "calcs": [
            "mean"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "fetzerch-sunandmoon-datasource",
            "uid": "53g5vwv7z"
          },
          "hide": true,
          "refId": "A",
          "target": "sun_altitude"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\nbase =\r\nfrom(bucket: \"solaredge_cloud\")\r\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n|> filter(fn: (r) =>\r\nr._measurement == \"panel\" and\r\nr._field == \"w\" and\r\nr.site == \"2489781\" and\r\nr.id =~ /^(182492144|182492145|182492146|182492147|182492148|182492149|182492150|182492156|182492157|182492158|182492160|182492161|182492162|182492163|182492164|182492167)$/\r\n)\r\n\r\n// Ultimo bucket NON vuoto complessivo (allineato ai 15')\r\nagg_nonempty =\r\nbase\r\n|> aggregateWindow(every: 15m, fn: last, createEmpty: false, timeSrc: \"_start\")\r\n\r\nglobalLast =\r\nagg_nonempty\r\n|> group()\r\n|> last()\r\n|> keep(columns: [\"_time\"])\r\n|> rename(columns: {_time: \"last_bucket\"})\r\n|> map(fn: (r) => ({ r with _join: \"k\" }))\r\n|> keep(columns: [\"_join\",\"last_bucket\"])\r\n\r\n// Serie a 15m con bucket creati (per riempire a 0 PRIMA dei dati)\r\nagg_all =\r\nbase\r\n|> aggregateWindow(every: 15m, fn: last, createEmpty: true, timeSrc: \"_start\")\r\n|> map(fn: (r) => ({ r with _join: \"k\" }))\r\n\r\n// Taglia ULTIMO e PENULTIMO:\r\n// cutoff = last_bucket - 30m, poi includi <= cutoff (non solo <)\r\ncutoff =\r\nglobalLast\r\n|> map(fn: (r) => ({ r with cutoff: time(v: int(v: r.last_bucket) - int(v: 30m)) }))\r\n|> keep(columns: [\"_join\",\"cutoff\"])\r\n\r\nresult =\r\njoin(tables: {a: agg_all, b: cutoff}, on: [\"_join\"])\r\n|> filter(fn: (r) => r._time <= r.cutoff)\r\n|> fill(column: \"_value\", value: 0.0)\r\n\r\n// Mappatura nomi (Ovest 1..8, Est 1..8)\r\nwithName =\r\nresult\r\n|> map(fn: (r) => ({\r\nr with\r\nname:\r\nif r.id == \"182492144\" then \"1° Pannello 375W Ovest\" else\r\nif r.id == \"182492145\" then \"2° Pannello 375W Ovest\" else\r\nif r.id == \"182492146\" then \"3° Pannello 375W Ovest\" else\r\nif r.id == \"182492147\" then \"4° Pannello 375W Ovest\" else\r\nif r.id == \"182492148\" then \"5° Pannello 375W Ovest\" else\r\nif r.id == \"182492149\" then \"6° Pannello 375W Ovest\" else\r\nif r.id == \"182492150\" then \"7° Pannello 375W Ovest\" else\r\nif r.id == \"182492156\" then \"8° Pannello 375W Ovest\" else\r\nif r.id == \"182492157\" then \"1° Pannello 375W Est\" else\r\nif r.id == \"182492158\" then \"2° Pannello 375W Est\" else\r\nif r.id == \"182492160\" then \"3° Pannello 375W Est\" else\r\nif r.id == \"182492161\" then \"4° Pannello 375W Est\" else\r\nif r.id == \"182492162\" then \"5° Pannello 375W Est\" else\r\nif r.id == \"182492163\" then \"6° Pannello 375W Est\" else\r\nif r.id == \"182492164\" then \"7° Pannello 375W Est\" else\r\nif r.id == \"182492167\" then \"8° Pannello 375W Est\" else r.id\r\n}))\r\n\r\nwithLabels =\r\nwithName\r\n|> group(columns: [\"name\"])\r\n|> keep(columns: [\"_time\",\"_value\",\"name\"])\r\n\r\nwithLabels",
          "refId": "B"
        }
      ],
      "title": "Potenza Pannelli",
      "transformations": [
        {
          "id": "joinByField",
          "options": {}
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "includeByName": {},
            "indexByName": {
              "1° Pannello 375W Est": 9,
              "1° Pannello 375W Ovest": 1,
              "2° Pannello 375W Est": 10,
              "2° Pannello 375W Ovest": 2,
              "3° Pannello 375W Est": 11,
              "3° Pannello 375W Ovest": 3,
              "4° Pannello 375W Est": 12,
              "4° Pannello 375W Ovest": 4,
              "5° Pannello 375W Est": 13,
              "5° Pannello 375W Ovest": 5,
              "6° Pannello 375W Est": 14,
              "6° Pannello 375W Ovest": 6,
              "7° Pannello 375W Est": 15,
              "7° Pannello 375W Ovest": 7,
              "8° Pannello 375W Est": 16,
              "8° Pannello 375W Ovest": 8,
              "Time": 0
            },
            "orderBy": [
              {
                "desc": false,
                "type": "name"
              }
            ],
            "orderByMode": "manual",
            "renameByName": {}
          }
        }
      ],
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "-- Mixed --"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "mappings": [],
          "max": 400,
          "min": 0,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "green",
                "value": 0
              },
              {
                "color": "#EAB839",
                "value": 50
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 14,
        "w": 24,
        "x": 0,
        "y": 97
      },
      "id": 154,
      "options": {
        "displayMode": "gradient",
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "maxVizHeight": 300,
        "minVizHeight": 10,
        "minVizWidth": 0,
        "namePlacement": "auto",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "max"
          ],
          "fields": "",
          "values": false
        },
        "showUnfilled": true,
        "sizing": "auto",
        "text": {},
        "valueMode": "color"
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "HVjeTNd7z"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\nfrom(bucket: \"solaredge_cloud\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"panel\")\r\n  |> filter(fn: (r) => r[\"id\"] == \"182492144\" or r[\"id\"] == \"182492143\" or r[\"id\"] == \"182492145\" or r[\"id\"] == \"182492146\" or r[\"id\"] == \"182492147\" or r[\"id\"] == \"182492148\" or r[\"id\"] == \"182492149\" or r[\"id\"] == \"182492150\" or r[\"id\"] == \"182492156\" or r[\"id\"] == \"182492157\" or r[\"id\"] == \"182492158\" or r[\"id\"] == \"182492160\" or r[\"id\"] == \"182492161\" or r[\"id\"] == \"182492162\" or r[\"id\"] == \"182492163\" or r[\"id\"] == \"182492164\" or r[\"id\"] == \"182492167\")\r\n  |> aggregateWindow(every: 15m, fn: last, createEmpty: false)\r\n  |> yield(name: \"last\")",
          "refId": "B"
        }
      ],
      "title": "Potenza Picco Pannelli",
      "transformations": [
        {
          "id": "seriesToColumns",
          "options": {}
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "includeByName": {},
            "indexByName": {},
            "renameByName": {
              "value {id=\"182492143\", name=\"panel\", site=\"2489781\"}": "Potenza Totale",
              "w {id=\"182492143\", name=\"panel\", site=\"2489781\"}": "Picco Totale Pannelli",
              "w {id=\"182492144\", name=\"panel\", site=\"2489781\"}": "1° Pannello 375W Ovest",
              "w {id=\"182492145\", name=\"panel\", site=\"2489781\"}": "2° Pannello 375W Ovest",
              "w {id=\"182492146\", name=\"panel\", site=\"2489781\"}": "3° Pannello 375W Ovest",
              "w {id=\"182492147\", name=\"panel\", site=\"2489781\"}": "4° Pannello 375W Ovest",
              "w {id=\"182492148\", name=\"panel\", site=\"2489781\"}": "5° Pannello 375W Ovest",
              "w {id=\"182492149\", name=\"panel\", site=\"2489781\"}": "6° Pannello 375W Ovest",
              "w {id=\"182492150\", name=\"panel\", site=\"2489781\"}": "7° Pannello 375W Ovest",
              "w {id=\"182492156\", name=\"panel\", site=\"2489781\"}": "8° Pannello 375W Ovest",
              "w {id=\"182492157\", name=\"panel\", site=\"2489781\"}": "1° Pannello 375W Est",
              "w {id=\"182492158\", name=\"panel\", site=\"2489781\"}": "2° Pannello 375W Est",
              "w {id=\"182492160\", name=\"panel\", site=\"2489781\"}": "3° Pannello 375W Est",
              "w {id=\"182492161\", name=\"panel\", site=\"2489781\"}": "4° Pannello 375W Est",
              "w {id=\"182492162\", name=\"panel\", site=\"2489781\"}": "5° Pannello 375W Est",
              "w {id=\"182492163\", name=\"panel\", site=\"2489781\"}": "6° Pannello 375W Est",
              "w {id=\"182492164\", name=\"panel\", site=\"2489781\"}": "7° Pannello 375W Est",
              "w {id=\"182492167\", name=\"panel\", site=\"2489781\"}": "8° Pannello 375W Est"
            }
          }
        }
      ],
      "transparent": true,
      "type": "bargauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "eeutt541fflz4c"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "light-yellow",
            "mode": "fixed"
          },
          "decimals": 2,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "light-red",
                "value": 0
              }
            ]
          },
          "unit": "kwatth"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Immissione"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "light-blue",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Emissioni CO2 Evitate"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "purple",
                  "mode": "fixed"
                }
              },
              {
                "id": "unit",
                "value": "massg"
              },
              {
                "id": "decimals",
                "value": 2
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Prelievo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-red",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Autoconsumo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Consumo"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "orange",
                  "mode": "fixed"
                }
              },
              {
                "id": "unit",
                "value": "kwatth"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 3,
        "w": 24,
        "x": 0,
        "y": 111
      },
      "hideTimeOverride": true,
      "id": 58,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "text": {
          "titleSize": 27,
          "valueSize": 27
        },
        "textMode": "value_and_name",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "eeutt541fflz4c"
          },
          "hide": false,
          "query": "import \"timezone\"\r\noption location = timezone.location(name: \"Europe/Rome\")\r\n\r\n// Fattore emissioni: 0.4 kg CO2 per kWh prodotto\r\nemission_factor_kg_per_kwh = 0.4\r\n\r\n// Produzione (kWh)\r\nprod =\r\n  from(bucket: \"solaredge_cloud\")\r\n    |> range(start: 0)\r\n    |> filter(fn: (r) =>\r\n      r._measurement == \"energy\" and r._field == \"wh\" and\r\n      r.site == \"2489781\" and r.type == \"production\"\r\n    )\r\n    |> group()\r\n    |> sum(column: \"_value\")\r\n    |> map(fn: (r) => ({ r with _j: \"k\", Produzione: r._value / 1000.0 }))\r\n    |> keep(columns: [\"_j\",\"Produzione\"])\r\n\r\n// Immissione (kWh)\r\nfeed =\r\n  from(bucket: \"solaredge_cloud\")\r\n    |> range(start: 0)\r\n    |> filter(fn: (r) =>\r\n      r._measurement == \"energy\" and r._field == \"wh\" and\r\n      r.site == \"2489781\" and r.type == \"feedin\"\r\n    )\r\n    |> group()\r\n    |> sum(column: \"_value\")\r\n    |> map(fn: (r) => ({ r with _j: \"k\", Immissione: r._value / 1000.0 }))\r\n    |> keep(columns: [\"_j\",\"Immissione\"])\r\n\r\n// Prelievo (kWh) — purchased + gridconsumption\r\npurch =\r\n  from(bucket: \"solaredge_cloud\")\r\n    |> range(start: 0)\r\n    |> filter(fn: (r) =>\r\n      r._measurement == \"energy\" and r._field == \"wh\" and\r\n      r.site == \"2489781\" and (r.type == \"purchased\" or r.type == \"gridconsumption\")\r\n    )\r\n    |> group()\r\n    |> sum(column: \"_value\")\r\n    |> map(fn: (r) => ({ r with _j: \"k\", Prelievo: r._value / 1000.0 }))\r\n    |> keep(columns: [\"_j\",\"Prelievo\"])\r\n\r\n// Consumo (kWh)\r\ncons =\r\n  from(bucket: \"solaredge_cloud\")\r\n    |> range(start: 0)\r\n    |> filter(fn: (r) =>\r\n      r._measurement == \"energy\" and r._field == \"wh\" and\r\n      r.site == \"2489781\" and r.type == \"consumption\"\r\n    )\r\n    |> group()\r\n    |> sum(column: \"_value\")\r\n    |> map(fn: (r) => ({ r with _j: \"k\", Consumo: r._value / 1000.0 }))\r\n    |> keep(columns: [\"_j\",\"Consumo\"])\r\n\r\n// Join a catena su _j\r\nj1 = join(tables: {a: prod, b: feed},  on: [\"_j\"])\r\nj2 = join(tables: {a: j1,  b: purch}, on: [\"_j\"])\r\nj3 = join(tables: {a: j2,  b: cons},  on: [\"_j\"])\r\n\r\n// Derivati: Autoconsumo (kWh) e Emissioni CO2 Evitate (kg, senza underscore nel nome colonna)\r\nj3\r\n  |> map(fn: (r) => ({\r\n      r with\r\n      Autoconsumo: r.Consumo - r.Prelievo,\r\n      EmissioniCO2Evitate: r.Produzione * emission_factor_kg_per_kwh\r\n  }))\r\n  |> rename(columns: {EmissioniCO2Evitate: \"Emissioni CO2 Evitate\"})\r\n  |> keep(columns: [\r\n      \"Produzione\",\r\n      \"Immissione\",\r\n      \"Prelievo\",\r\n      \"Consumo\",\r\n      \"Autoconsumo\",\r\n      \"Emissioni CO2 Evitate\"\r\n  ])",
          "refId": "Statistiche"
        }
      ],
      "timeFrom": "0d/d",
      "title": "Riepilogo Energia - Vita Impianto",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "includeByName": {},
            "indexByName": {
              "Autoconsumo": 2,
              "Consumo": 1,
              "Emissioni CO2 Evitate": 5,
              "Immissione": 4,
              "Prelievo": 3,
              "Produzione": 0
            },
            "renameByName": {}
          }
        }
      ],
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "0MA5Qsvnz"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 0,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-green",
                "value": 0
              },
              {
                "color": "dark-red",
                "value": 0
              }
            ]
          },
          "unit": "€"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Spesa Con Fotovoltaico"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-orange",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Risparmio Netto"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 3,
        "w": 24,
        "x": 0,
        "y": 114
      },
      "hideTimeOverride": true,
      "id": 192,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.2.0",
      "targets": [
        {
          "alias": "Produzione",
          "datasource": {
            "type": "influxdb",
            "uid": "0MA5Qsvnz"
          },
          "hide": true,
          "query": "SELECT last(\"energy_total\") / 1000 FROM \"inverter\" WHERE $timeFilter",
          "rawQuery": true,
          "refId": "Produzione",
          "resultFormat": "time_series"
        },
        {
          "alias": "Prelievo",
          "datasource": {
            "type": "influxdb",
            "uid": "0MA5Qsvnz"
          },
          "hide": true,
          "query": "SELECT last(\"import_energy_active\") / 1000 / 100 FROM \"meter\" WHERE  $timeFilter ",
          "rawQuery": true,
          "refId": "Prelievo",
          "resultFormat": "time_series"
        },
        {
          "alias": "Immissione",
          "datasource": {
            "type": "influxdb",
            "uid": "0MA5Qsvnz"
          },
          "hide": true,
          "query": "SELECT last(\"export_energy_active\")   / 1000 / 100 FROM \"meter\" WHERE  $timeFilter ",
          "rawQuery": true,
          "refId": "Immissione",
          "resultFormat": "time_series"
        },
        {
          "datasource": {
            "name": "Expression",
            "type": "__expr__",
            "uid": "__expr__"
          },
          "expression": "($Produzione + $Prelievo - $Immissione)",
          "hide": true,
          "refId": "Consumo",
          "type": "math"
        },
        {
          "datasource": {
            "name": "Expression",
            "type": "__expr__",
            "uid": "__expr__"
          },
          "expression": "$Consumo * $price",
          "hide": false,
          "refId": "Spesa_Senza_FV",
          "type": "math"
        },
        {
          "datasource": {
            "name": "Expression",
            "type": "__expr__",
            "uid": "__expr__"
          },
          "expression": "($Consumo * $price)  - ($Prelievo * $pricescambiato) - (($Immissione - $Prelievo) * $priceimmissione)",
          "hide": false,
          "refId": "Spesa_Con_FV",
          "type": "math"
        },
        {
          "datasource": {
            "name": "Expression",
            "type": "__expr__",
            "uid": "__expr__"
          },
          "expression": "$Spesa_Senza_FV - $Spesa_Con_FV",
          "hide": false,
          "refId": "Risparmio Netto",
          "type": "math"
        }
      ],
      "timeFrom": "0d/d",
      "title": "Riepilogo SSP - Vita Impianto",
      "transformations": [
        {
          "id": "filterFieldsByName",
          "options": {
            "include": {}
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "Spesa_Senza_FV Immissione",
            "renamePattern": "Spesa Senza Fotovoltaico"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "Spesa_Con_FV",
            "renamePattern": "Spesa Con Fotovoltaico"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "Risparmio Netto Immissione",
            "renamePattern": "Risparmio Netto"
          }
        }
      ],
      "transparent": true,
      "type": "stat"
    }
  ],
  "preload": false,
  "refresh": "5s",
  "schemaVersion": 42,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "text": "0.20",
          "value": "0.20"
        },
        "description": "€ / KWh",
        "includeAll": false,
        "label": "Prezzo Energia Fornitore",
        "name": "price",
        "options": [
          {
            "selected": true,
            "text": "0.20",
            "value": "0.20"
          }
        ],
        "query": "0.20",
        "type": "custom"
      },
      {
        "current": {
          "text": "0.20",
          "value": "0.20"
        },
        "description": "€ / KWh",
        "includeAll": false,
        "label": "Prezzo Energia Scambiata ",
        "name": "pricescambiato",
        "options": [
          {
            "selected": true,
            "text": "0.20",
            "value": "0.20"
          }
        ],
        "query": "0.20",
        "type": "custom"
      },
      {
        "current": {
          "text": "0.10",
          "value": "0.10"
        },
        "description": "€ / KWh",
        "includeAll": false,
        "label": "Prezzo Energia Immessa",
        "name": "priceimmissione",
        "options": [
          {
            "selected": true,
            "text": "0.10",
            "value": "0.10"
          }
        ],
        "query": "0.10",
        "type": "custom"
      }
    ]
  },
  "time": {
    "from": "now/d",
    "to": "now/d"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Solaredge 3.0",
  "uid": "afb91a6f-d8f7-43ae-8a98-67eab1bb4baa",
  "version": 159,
  "weekStart": "monday"
}